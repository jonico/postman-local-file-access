{
	"info": {
		"_postman_id": "2169d69e-0db4-490a-8185-fe18b0a100c5",
		"name": "Postman Filesystem API",
		"description": "# Expose local directory CRUD for use with Postman\n\n## Features\n\n- üîí Secure authentication with token\n- üìÅ CRUD operations for files and directories\n- üîç Directory listing\n- üö´ Path traversal protection\n- üåê Web UI for easy file management\n- üê≥ Docker support\n- üìö Postman collection included\n\n### Authentication\n\nAll API endpoints (except token setup) require a Bearer token in the Authorization header:\n```\nAuthorization: Bearer your-token\n```\n\n### Endpoints\n\n#### Authentication\n- `POST /api/auth/setup` - Set up authentication token\n  ```http\n  POST /api/auth/setup\n  Content-Type: application/json\n\n  {\n      \"token\": \"your-secret-token\"\n  }\n  ```\n\n#### Files\n- `GET /api/files/{path}` - Read file contents\n  - Returns file content with appropriate Content-Type header\n  - Supports both binary and text files\n  - Returns 400 if path points to a directory\n  - Returns 404 if file not found\n\n- `POST /api/files/{path}` - Create/Upload file\n  - Upload using multipart/form-data with \"file\" field\n  - Returns 400 if path points to a directory\n  - Returns 404 if parent directory not found\n\n- `PUT /api/files/{path}` - Update file contents\n  ```http\n  Content-Type: application/json\n\n  {\n      \"content\": \"Updated file content\"\n  }\n  ```\n  - Returns 400 if path points to a directory\n  - Returns 404 if file not found\n\n- `DELETE /api/files/{path}` - Delete file\n  - Returns 400 if path points to a directory\n  - Returns 404 if file not found\n\n#### Directories\n- `GET /api/directories/{path}` - List directory contents\n  - Lists all files and subdirectories\n  - Use without path parameter to list root directory\n  - Returns array of items with metadata:\n  ```json\n  [\n      {\n          \"name\": \"example.txt\",\n          \"path\": \"folder/example.txt\",\n          \"isDirectory\": false,\n          \"size\": 1234,\n          \"modified\": \"2024-01-20T12:00:00.000Z\"\n      }\n  ]\n  ```\n\n- `POST /api/directories/{path}` - Create directory\n  - Returns 400 if directory exists\n  - Returns 404 if parent directory not found\n\n- `DELETE /api/directories/{path}` - Delete directory\n  - Returns 400 if directory not empty\n  - Returns 404 if directory not found\n\n### Error Responses\n\nAll error responses follow this format:\n```json\n{\n    \"error\": \"Error message description\",\n    \"code\": \"ERROR_CODE\"  // Optional error code\n}\n```\n\nCommon status codes:\n- 400: Bad Request\n- 401: Unauthorized\n- 404: Not Found\n- 500: Internal Server Error",
		"schema": "https://schema.postman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Setup Token",
					"id": "b7846787-7ade-4c5b-bbb4-60036d0849f2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{token}}\"\n}"
						},
						"url": "{{baseUrl}}/api/auth/setup",
						"description": "#### HTTP POST /api/auth/setup\n\nThis endpoint is used to set up authentication.\n\n##### Request Body\n\n- `token` (string): The token used for authentication setup.\n    \n\n##### Example Request Body\n\n``` json\n{\n    \"token\": \"{{token}}\"\n}\n\n ```\n\n##### Response\n\nThe response for this request is in JSON format with a schema as follows:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```\n\nThe response contains a `message` field, which provides information about the status of the authentication setup.\n\n##### Example Response\n\n``` json\n{\n    \"message\": \"Token set successfully\"\n}\n\n ```"
					},
					"response": [
						{
							"id": "5f5d8ee7-7939-4825-8d0d-2482a64ac59d",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"{{token}}\"\n}"
								},
								"url": "{{baseUrl}}/api/auth/setup"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "36"
								},
								{
									"key": "ETag",
									"value": "W/\"24-cZ9rUNhH84GCHQm4MQH9HVAAwVc\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Feb 2025 09:25:40 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"message\": \"Token set successfully\"\n}"
						},
						{
							"id": "ae932956-a34e-47d9-b877-f340a7a5b1fa",
							"name": "500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"{{token}}\"\n}"
								},
								"url": "{{baseUrl}}/api/auth/setup"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "29"
								},
								{
									"key": "ETag",
									"value": "W/\"1d-odkTEMqFD5+wjMGEOlI4zqNpwHs\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Feb 2025 09:26:06 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"error\": \"Token already set\"\n}"
						}
					]
				}
			],
			"id": "ff3281ae-abea-4573-bd93-03830f54f515"
		},
		{
			"name": "Files",
			"item": [
				{
					"name": "Read File",
					"id": "02c229e8-4a2c-479e-b927-9ea4ff63343d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": "{{baseUrl}}/api/files/file.txt",
						"description": "# File Download\n\nThis endpoint makes an HTTP GET request to retrieve the file \"file.txt\".\n\n### Request\n\n- Method: GET\n    \n- URL: `{{baseUrl}}/api/files/file.txt`\n    \n\n### Response\n\n- Status: 200\n    \n- Content-Type: text/plain\n    \n\nThe response contains the content of the file \"file.txt\", which in this case is \"Hello, World!\"."
					},
					"response": [
						{
							"id": "5aee07c0-3eed-4ea2-834d-cf2ca308c8ff",
							"name": "200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": "{{baseUrl}}/api/files/hihi/file.txt"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain"
								},
								{
									"key": "Content-Length",
									"value": "13"
								},
								{
									"key": "Date",
									"value": "Tue, 18 Feb 2025 09:31:00 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "Hello, World!"
						},
						{
							"id": "ebb0b59f-3dac-4629-8800-7c4a4355c108",
							"name": "404",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": "{{baseUrl}}/api/files/path/to/your/file.txt"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "26"
								},
								{
									"key": "ETag",
									"value": "W/\"1a-qXGfN9t+AtsqoUJSBpc9ym+XpDk\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Feb 2025 09:07:47 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"error\": \"File not found\"\n}"
						},
						{
							"id": "59b132ba-b15c-4640-90bc-fe6c203ef7a8",
							"name": "401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": "{{baseUrl}}/api/files/hihi/file.txt"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "ETag",
									"value": "W/\"30-ueWnE+mRRqSQ4CBeOXBzaS18M4o\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Feb 2025 09:32:49 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"error\": \"Invalid token\",\n    \"code\": \"TOKEN_INVALID\"\n}"
						}
					]
				},
				{
					"name": "Upload File",
					"id": "a6db340d-4583-4520-aa92-edc63e808fe1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/Users/johannesnicolai/Downloads/example.txt"
								}
							]
						},
						"url": "{{baseUrl}}/api/files/file.txt"
					},
					"response": [
						{
							"id": "1ae812b1-f64f-4212-8c14-24ee344b5754",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/Users/johannesnicolai/Downloads/Postman_corporateSE_jeanLagadec/MyFirstCollection.postman_collection.json"
										}
									]
								},
								"url": "{{baseUrl}}/api/files/file.txt"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "39"
								},
								{
									"key": "ETag",
									"value": "W/\"27-exfREJuNjXuh0J/J2UNcbW1LVig\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Feb 2025 09:08:33 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"message\": \"File created successfully\"\n}"
						},
						{
							"id": "f4628cb3-0d56-4190-a493-4e39723f471c",
							"name": "404",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/Users/johannesnicolai/Downloads/Postman_corporateSE_jeanLagadec/MyFirstCollection.postman_collection.json"
										}
									]
								},
								"url": "{{baseUrl}}/api/files/file.txt"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "ETag",
									"value": "W/\"30-ueWnE+mRRqSQ4CBeOXBzaS18M4o\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Feb 2025 09:28:20 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"error\": \"Invalid token\",\n    \"code\": \"TOKEN_INVALID\"\n}"
						}
					]
				},
				{
					"name": "Create File Base64",
					"id": "ed507842-ffa3-4073-82af-422d2862d25a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fileData\": \"xdata:application/json;base64,SGVsbG8sIFdvcmxkIQ==\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/files/file-base64.txt"
					},
					"response": [
						{
							"id": "7ff69d7d-2c10-48ac-ab83-79ee722ca3d9",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fileData\": \"data:application/octet-stream;base64,SGVsbG8sIFdvcmxkIQ==\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/files/file-base64.txt"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "39"
								},
								{
									"key": "ETag",
									"value": "W/\"27-exfREJuNjXuh0J/J2UNcbW1LVig\""
								},
								{
									"key": "Date",
									"value": "Thu, 20 Feb 2025 21:09:31 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"message\": \"File created successfully\"\n}"
						},
						{
							"id": "b0f8b06c-085d-4ef3-a953-0d1a91c88cf5",
							"name": "400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fileData\": \"xdata:application/json;base64,SGVsbG8sIFdvcmxkIQ==\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/files/file-base64.txt"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "118"
								},
								{
									"key": "ETag",
									"value": "W/\"76-jv9Um7cOa+/Fj+Uki5SVIJ7vtSQ\""
								},
								{
									"key": "Date",
									"value": "Thu, 20 Feb 2025 21:11:35 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"error\": \"Invalid fileData format. Must be a data URI string starting with \\\"data:application/octet-stream;base64,\\\"\"\n}"
						},
						{
							"id": "a4b20f3f-8e10-42ac-ad1a-c2a4f5565c73",
							"name": "401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fileData\": \"xdata:application/json;base64,SGVsbG8sIFdvcmxkIQ==\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/files/file-base64.txt"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "ETag",
									"value": "W/\"30-ueWnE+mRRqSQ4CBeOXBzaS18M4o\""
								},
								{
									"key": "Date",
									"value": "Thu, 20 Feb 2025 21:12:22 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"error\": \"Invalid token\",\n    \"code\": \"TOKEN_INVALID\"\n}"
						}
					]
				},
				{
					"name": "CreateFile",
					"id": "f865c287-8958-444f-995f-0632f0dbbda2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"Hello, World!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/files/file.txt",
						"description": "# File Upload\n\nThis endpoint allows you to upload a file to the server.\n\n## Request Body\n\n- `content`: The content of the file to be uploaded.\n    \n\n## Response\n\n- `message`: A message indicating the status of the file upload."
					},
					"response": [
						{
							"id": "81f6b4bf-f4c9-463b-913f-841320d2d2c7",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"Hello, World!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/files/subfolder/file2.txt"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "39"
								},
								{
									"key": "ETag",
									"value": "W/\"27-exfREJuNjXuh0J/J2UNcbW1LVig\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Feb 2025 09:16:21 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"message\": \"File created successfully\"\n}"
						},
						{
							"id": "e5dfbc33-2350-4653-b817-1f55c67074cf",
							"name": "401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"Hello, World!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/files/subfolder/file2.txt"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "ETag",
									"value": "W/\"30-ueWnE+mRRqSQ4CBeOXBzaS18M4o\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Feb 2025 09:28:03 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"error\": \"Invalid token\",\n    \"code\": \"TOKEN_INVALID\"\n}"
						}
					]
				},
				{
					"name": "Update File",
					"id": "26b7e678-da6b-4967-97ba-218b9ebbbb31",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"Updated file content\"\n}"
						},
						"url": "{{baseUrl}}/api/files/file.txt",
						"description": "This endpoint allows you to update the content of a specific file by sending an HTTP PUT request to {{baseUrl}}/api/files/file.txt.\n\n### Request Body\n\nThe request should include a raw JSON body with the following parameter:\n\n- `content`: The updated content of the file.\n    \n\n### Response\n\nUpon a successful execution, the endpoint returns a 200 status with a JSON response containing a `message` key. The value of the `message` key will provide information about the success of the update operation.\n\n#### Example Response\n\n``` json\n{\n    \"message\": \"\"\n}\n\n ```"
					},
					"response": [
						{
							"id": "7ec23a2e-992b-4b6c-bb83-a3a9d0d58377",
							"name": "200",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"Updated file content\"\n}"
								},
								"url": "{{baseUrl}}/api/files/file.txt"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "39"
								},
								{
									"key": "ETag",
									"value": "W/\"27-zkMfOAbrMDe5DfHNF2+LwaGcgew\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Feb 2025 09:16:57 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"message\": \"File updated successfully\"\n}"
						},
						{
							"id": "5eb54bc2-efec-4497-9d55-91597c181c2c",
							"name": "401",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"Updated file content\"\n}"
								},
								"url": "{{baseUrl}}/api/files/file.txt"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "ETag",
									"value": "W/\"30-ueWnE+mRRqSQ4CBeOXBzaS18M4o\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Feb 2025 09:27:47 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"error\": \"Invalid token\",\n    \"code\": \"TOKEN_INVALID\"\n}"
						}
					]
				},
				{
					"name": "Delete File",
					"id": "c0528c2f-f247-41a5-94e7-d0761b2ef365",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": "{{baseUrl}}/api/files/file.txt",
						"description": "### Delete File\n\nDeletes the specified file from the server.\n\n#### Request Body\n\nThis endpoint does not require a request body.\n\n#### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n\n``` json\n{\n    \"message\": \"\"\n}\n\n ```"
					},
					"response": [
						{
							"id": "d6c9598d-2191-482d-8fc5-eec8f0305976",
							"name": "401",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": "{{baseUrl}}/api/files/path/to/your/file.txt"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "ETag",
									"value": "W/\"30-ueWnE+mRRqSQ4CBeOXBzaS18M4o\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Feb 2025 09:27:26 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"error\": \"Invalid token\",\n    \"code\": \"TOKEN_INVALID\"\n}"
						}
					]
				}
			],
			"id": "face08b6-0644-4ff1-85d1-16fed6502e30"
		},
		{
			"name": "Directories",
			"item": [
				{
					"name": "List Directory Contents",
					"id": "03b3e5cc-3c5d-43b9-b680-15fa84acf82a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": "{{baseUrl}}/api/directories/sub-folder",
						"description": "This endpoint makes an HTTP GET request to retrieve the list of subdirectories and ordinary files within the specified \"sub-folder\" directory.\n\n### Request\n\n- Method: GET\n    \n- URL: {{baseUrl}}/api/directories/sub-folder\n    \n\n### Response\n\nThe endpoint returns a JSON array with objects representing the subdirectories and ordinary files within the \"sub-folder\" directory. Each object in the array includes the following properties:\n\n- \"name\": (string) The name of the subdirectory or file.\n    \n- \"path\": (string) The path of the subdirectory or file.\n    \n- \"isDirectory\": (boolean) Indicates whether the item is a directory (true) or a file (false).\n    \n- \"size\": (number) The size of the file in bytes. For directories, the size is 0.\n    \n- \"modified\": (string) The date and time when the item was last modified.\n    \n\nExample response:\n\n``` json\n[\n    {\n        \"name\": \"\",\n        \"path\": \"\",\n        \"isDirectory\": true,\n        \"size\": 0,\n        \"modified\": \"\"\n    }\n]\n\n ```"
					},
					"response": [
						{
							"id": "300076ac-30c9-4b30-935a-3acc966ad034",
							"name": "404",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": "{{baseUrl}}/api/directories/subfolder"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "31"
								},
								{
									"key": "ETag",
									"value": "W/\"1f-A5NMA3K86FIlQL/DmZNV/pGHmhI\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Feb 2025 09:18:21 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"error\": \"Directory not found\"\n}"
						},
						{
							"id": "2e7f5dd2-263a-4ec2-9047-d79813145844",
							"name": "401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": "{{baseUrl}}/api/directories/sub-folder"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "ETag",
									"value": "W/\"30-ueWnE+mRRqSQ4CBeOXBzaS18M4o\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Feb 2025 09:23:31 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"error\": \"Invalid token\",\n    \"code\": \"TOKEN_INVALID\"\n}"
						},
						{
							"id": "2e31726c-4ea7-4f27-9802-51a1141bb740",
							"name": "200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": "{{baseUrl}}/api/directories/hihi"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "214"
								},
								{
									"key": "ETag",
									"value": "W/\"d6-Te4SvNtTGGaTBpuoQhhKcaHTT4k\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Feb 2025 09:24:43 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "[\n    {\n        \"name\": \"file.txt\",\n        \"path\": \"hihi/file.txt\",\n        \"isDirectory\": false,\n        \"size\": 13,\n        \"modified\": \"2025-02-18T09:11:20.999Z\"\n    },\n    {\n        \"name\": \"haha\",\n        \"path\": \"hihi/haha\",\n        \"isDirectory\": true,\n        \"size\": 64,\n        \"modified\": \"2025-02-18T09:12:07.866Z\"\n    }\n]"
						}
					]
				},
				{
					"name": "List Root Directory",
					"id": "5b64e0ac-d38d-4933-a619-0816183c5ae5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": "{{baseUrl}}/api/directories",
						"description": "This endpoint makes an HTTP GET request to retrieve a list of all entries in the root data directory, including ordinary files and subdirectories. The response will be in JSON format and will include the name, path, whether it is a directory, size, and modification details for each entry.\n\n- \"name\": (string) The name of the directory.\n    \n- \"path\": (string) The path of the directory.\n    \n- \"isDirectory\": (boolean) Indicates whether the item is a directory.\n    \n- \"size\": (number) The size of the directory.\n    \n- \"modified\": (string) The date when the directory was last modified."
					},
					"response": [
						{
							"id": "946ae888-e293-4702-bead-5f7b52c2324e",
							"name": "200",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/api/directories"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "688"
								},
								{
									"key": "ETag",
									"value": "W/\"2b0-N3zzfpH9MAwF8HfhRecrefcbF7w\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Feb 2025 09:20:24 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "[\n    {\n        \"name\": \"deepseek-qwen.png\",\n        \"path\": \"deepseek-qwen.png\",\n        \"isDirectory\": false,\n        \"size\": 518483,\n        \"modified\": \"2025-02-18T09:00:40.559Z\"\n    },\n    {\n        \"name\": \"file.txt\",\n        \"path\": \"file.txt\",\n        \"isDirectory\": false,\n        \"size\": 20,\n        \"modified\": \"2025-02-18T09:16:57.376Z\"\n    },\n    {\n        \"name\": \"file2.txt\",\n        \"path\": \"file2.txt\",\n        \"isDirectory\": false,\n        \"size\": 13,\n        \"modified\": \"2025-02-18T09:16:21.369Z\"\n    },\n    {\n        \"name\": \"hihi\",\n        \"path\": \"hihi\",\n        \"isDirectory\": true,\n        \"size\": 128,\n        \"modified\": \"2025-02-18T09:12:07.866Z\"\n    },\n    {\n        \"name\": \"hoho\",\n        \"path\": \"hoho\",\n        \"isDirectory\": true,\n        \"size\": 64,\n        \"modified\": \"2025-02-18T08:59:54.532Z\"\n    },\n    {\n        \"name\": \"johannes-wearedevelopers.png\",\n        \"path\": \"johannes-wearedevelopers.png\",\n        \"isDirectory\": false,\n        \"size\": 948054,\n        \"modified\": \"2025-02-18T09:01:23.591Z\"\n    }\n]"
						},
						{
							"id": "996b2c57-2af8-48a2-8504-5cd85eae74a0",
							"name": "401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": "{{baseUrl}}/api/directories"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "ETag",
									"value": "W/\"30-ueWnE+mRRqSQ4CBeOXBzaS18M4o\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Feb 2025 09:22:36 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"error\": \"Invalid token\",\n    \"code\": \"TOKEN_INVALID\"\n}"
						}
					]
				},
				{
					"name": "Create Directory",
					"id": "8b222867-079c-4c60-8732-96f2ad4da16e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": "{{baseUrl}}/api/directories/sub-folder",
						"description": "### Add Sub-Folder\n\nThis endpoint allows the user to add a sub-folder within the directories.\n\n**Request Body**\n\n- No request body parameters required.\n    \n\n**Response**\n\n- Status: 200 OK\n    \n- Content-Type: application/json\n    \n- { \"message\": \"\"}"
					},
					"response": [
						{
							"id": "0a3290b9-d472-48d7-b89b-d999090d7337",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": "{{baseUrl}}/api/directories/sub-folder"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "44"
								},
								{
									"key": "ETag",
									"value": "W/\"2c-4e4l4ld2J2OC0gTUNAO4SkbUIrM\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Feb 2025 09:19:04 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"message\": \"Directory created successfully\"\n}"
						},
						{
							"id": "aa1f93ea-3d07-4d3c-85a9-d74a97185e93",
							"name": "400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": "{{baseUrl}}/api/directories/sub-folder"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "36"
								},
								{
									"key": "ETag",
									"value": "W/\"24-gmpAyd0sII+6De+i+kdPnJ2YnIg\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Feb 2025 09:19:24 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"error\": \"Directory already exists\"\n}"
						},
						{
							"id": "5f3f2db2-9dd4-46d7-96ea-f8edc47d5f73",
							"name": "401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": "{{baseUrl}}/api/directories/sub-folder"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "ETag",
									"value": "W/\"30-ueWnE+mRRqSQ4CBeOXBzaS18M4o\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Feb 2025 09:22:51 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"error\": \"Invalid token\",\n    \"code\": \"TOKEN_INVALID\"\n}"
						}
					]
				},
				{
					"name": "Delete Directory",
					"id": "0462f060-4730-4dd1-98d7-c0b57d8ada66",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": "{{baseUrl}}/api/directories/sub-folder",
						"description": "### Delete Sub-Folder Directory\n\nThis endpoint is used to delete a sub-folder directory.\n\n#### Response\n\nThe response for this request is a JSON object with the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n\n ```"
					},
					"response": [
						{
							"id": "c3903813-242b-46b6-ad59-f0c08e1b48da",
							"name": "404",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": "{{baseUrl}}/api/directories/path/to/directory"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "31"
								},
								{
									"key": "ETag",
									"value": "W/\"1f-A5NMA3K86FIlQL/DmZNV/pGHmhI\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Feb 2025 09:19:49 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"error\": \"Directory not found\"\n}"
						},
						{
							"id": "98320743-6cea-4700-b530-900be7d7acd8",
							"name": "200",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": "{{baseUrl}}/api/directories/sub-folder"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "44"
								},
								{
									"key": "ETag",
									"value": "W/\"2c-seMfiaWX0TaLv67z8MCusy3q5R4\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Feb 2025 09:20:08 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"message\": \"Directory deleted successfully\"\n}"
						},
						{
							"id": "6c644ce7-dffd-4067-b042-ffab4a0fc463",
							"name": "401",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": "{{baseUrl}}/api/directories/sub-folder"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "ETag",
									"value": "W/\"30-ueWnE+mRRqSQ4CBeOXBzaS18M4o\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Feb 2025 09:23:16 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"error\": \"Invalid token\",\n    \"code\": \"TOKEN_INVALID\"\n}"
						},
						{
							"id": "2d0d13ee-c8be-439b-956a-3f0159069a95",
							"name": "400",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": "{{baseUrl}}/api/directories/hihi"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;script-src 'self';img-src 'self' data: https:;connect-src 'self';font-src 'self' https://cdn.jsdelivr.net;object-src 'none';media-src 'self';frame-src 'none';base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "34"
								},
								{
									"key": "ETag",
									"value": "W/\"22-fk/YOCnyZGcFmArJpBuZ/07vzVk\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Feb 2025 16:22:20 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"error\": \"Directory is not empty\"\n}"
						}
					]
				}
			],
			"id": "b0957484-3393-445a-b77d-e6296258febc"
		},
		{
			"name": "Package-Library-Use",
			"item": [
				{
					"name": "Create a file and read its content",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30f0f6e0-7dda-446b-95a7-5515d975f3c1",
								"exec": [
									"const fsLib = pm.require('@automotive-demo/local-filesystem-api-lib');",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    var jsonData = pm.response.json();",
									"    var fileName = jsonData.args.fileName;",
									"    var fileContent = jsonData.data;",
									"",
									"    pm.test(\"Create and read file\", async () => {",
									"        try {",
									"            await fsLib.setupAuth();",
									"            await fsLib.createFile(fileName, fileContent);",
									"            const content = await fsLib.readFile(fileName);",
									"            pm.expect(content).to.equal(fileContent);",
									"        } catch (error) {",
									"            pm.expect.fail(error.message);",
									"        }",
									"    });",
									""
								],
								"type": "text/javascript",
								"packages": {
									"@automotive-demo/local-filesystem-api-lib": {
										"id": "0195244c-fbb7-7035-8ebd-2a9585bd115e"
									}
								}
							}
						}
					],
					"id": "09376198-1426-4438-9646-7baadad659d5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "/**\n * Filesystem API Library\n * A collection of reusable functions for interacting with the filesystem API\n */\n\n/**\n * Get authentication token from parameter or environment\n * @param {string} [token] - Optional token parameter\n * @returns {string} The token to use\n * @throws {Error} If no token is available\n */\nfunction getToken(token) {\n    const envToken = pm.variables.get('token');\n    if (!token && !envToken) {\n        throw new Error('No token provided and no token found in environment');\n    }\n    return token || envToken;\n}\n\n/**\n * Setup authentication token\n * @param {string} [token] - Optional authentication token\n * @returns {Promise<Object>} Response from the auth setup endpoint\n */\nasync function setupAuth(token) {\n    const authToken = getToken(token);\n    const response = await pm.sendRequest({\n        url: `${pm.variables.get('baseUrl')}/api/auth/setup`,\n        method: 'POST',\n        header: { 'Content-Type': 'application/json' },\n        body: { mode: 'raw', raw: JSON.stringify({ token: authToken }) }\n    });\n    \n    if (response.code !== 200) {\n        throw new Error(`Auth setup failed: ${response.json().error}`);\n    }\n    return response.json();\n}\n\n/**\n * Read file contents\n * @param {string} path - Path to the file\n * @param {string} [token] - Optional authentication token\n * @returns {Promise<string>} File contents\n */\nasync function readFile(path, token) {\n    const authToken = getToken(token);\n    const response = await pm.sendRequest({\n        url: `${pm.variables.get('baseUrl')}/api/files/${path}`,\n        method: 'GET',\n        header: { 'Authorization': `Bearer ${authToken}` }\n    });\n    \n    if (response.code !== 200) {\n        throw new Error(`Read file failed: ${response.json().error}`);\n    }\n    return response.text();\n}\n\n/**\n * Create a new file\n * @param {string} path - Path where to create the file\n * @param {string} content - File content\n * @param {string} [token] - Optional authentication token\n * @returns {Promise<Object>} Response from create file endpoint\n */\nasync function createFile(path, content, token) {\n    const authToken = getToken(token);\n    const response = await pm.sendRequest({\n        url: `${pm.variables.get('baseUrl')}/api/files/${path}`,\n        method: 'POST',\n        header: {\n            'Authorization': `Bearer ${authToken}`,\n            'Content-Type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: { content }\n        }\n    });\n    \n    if (response.code !== 200) {\n        throw new Error(`Create file failed: ${response.json().error}`);\n    }\n    return response.json();\n}\n\n/**\n * Update file contents\n * @param {string} path - Path to the file\n * @param {string} content - New file content\n * @param {string} [token] - Optional authentication token\n * @returns {Promise<Object>} Response from update file endpoint\n */\nasync function updateFile(path, content, token) {\n    const authToken = getToken(token);\n    const response = await pm.sendRequest({\n        url: `${pm.variables.get('baseUrl')}/api/files/${path}`,\n        method: 'PUT',\n        header: {\n            'Authorization': `Bearer ${authToken}`,\n            'Content-Type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: { content }\n        }\n    });\n    \n    if (response.code !== 200) {\n        throw new Error(`Update file failed: ${response.json().error}`);\n    }\n    return response.json();\n}\n\n/**\n * Delete a file\n * @param {string} path - Path to the file to delete\n * @param {string} [token] - Optional authentication token\n * @returns {Promise<Object>} Response from delete file endpoint\n */\nasync function deleteFile(path, token) {\n    const authToken = getToken(token);\n    const response = await pm.sendRequest({\n        url: `${pm.variables.get('baseUrl')}/api/files/${path}`,\n        method: 'DELETE',\n        header: { 'Authorization': `Bearer ${authToken}` }\n    });\n    \n    if (response.code !== 200) {\n        throw new Error(`Delete file failed: ${response.json().error}`);\n    }\n    return response.json();\n}\n\nmodule.exports = {\n    setupAuth,\n    readFile,\n    createFile,\n    updateFile,\n    deleteFile\n}; ",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "https://postman-echo.com/post?fileName=your-file",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							],
							"query": [
								{
									"key": "fileName",
									"value": "your-file"
								}
							]
						}
					},
					"response": [
						{
							"id": "9ccc23c2-b335-48f8-852c-b90027cd6a67",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/**\n * Filesystem API Library\n * A collection of reusable functions for interacting with the filesystem API\n */\n\n/**\n * Get authentication token from parameter or environment\n * @param {string} [token] - Optional token parameter\n * @returns {string} The token to use\n * @throws {Error} If no token is available\n */\nfunction getToken(token) {\n    const envToken = pm.variables.get('token');\n    if (!token && !envToken) {\n        throw new Error('No token provided and no token found in environment');\n    }\n    return token || envToken;\n}\n\n/**\n * Setup authentication token\n * @param {string} [token] - Optional authentication token\n * @returns {Promise<Object>} Response from the auth setup endpoint\n */\nasync function setupAuth(token) {\n    const authToken = getToken(token);\n    const response = await pm.sendRequest({\n        url: `${pm.variables.get('baseUrl')}/api/auth/setup`,\n        method: 'POST',\n        header: { 'Content-Type': 'application/json' },\n        body: { mode: 'raw', raw: JSON.stringify({ token: authToken }) }\n    });\n    \n    if (response.code !== 200) {\n        throw new Error(`Auth setup failed: ${response.json().error}`);\n    }\n    return response.json();\n}\n\n/**\n * Read file contents\n * @param {string} path - Path to the file\n * @param {string} [token] - Optional authentication token\n * @returns {Promise<string>} File contents\n */\nasync function readFile(path, token) {\n    const authToken = getToken(token);\n    const response = await pm.sendRequest({\n        url: `${pm.variables.get('baseUrl')}/api/files/${path}`,\n        method: 'GET',\n        header: { 'Authorization': `Bearer ${authToken}` }\n    });\n    \n    if (response.code !== 200) {\n        throw new Error(`Read file failed: ${response.json().error}`);\n    }\n    return response.text();\n}\n\n/**\n * Create a new file\n * @param {string} path - Path where to create the file\n * @param {string} content - File content\n * @param {string} [token] - Optional authentication token\n * @returns {Promise<Object>} Response from create file endpoint\n */\nasync function createFile(path, content, token) {\n    const authToken = getToken(token);\n    const response = await pm.sendRequest({\n        url: `${pm.variables.get('baseUrl')}/api/files/${path}`,\n        method: 'POST',\n        header: {\n            'Authorization': `Bearer ${authToken}`,\n            'Content-Type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: { content }\n        }\n    });\n    \n    if (response.code !== 200) {\n        throw new Error(`Create file failed: ${response.json().error}`);\n    }\n    return response.json();\n}\n\n/**\n * Update file contents\n * @param {string} path - Path to the file\n * @param {string} content - New file content\n * @param {string} [token] - Optional authentication token\n * @returns {Promise<Object>} Response from update file endpoint\n */\nasync function updateFile(path, content, token) {\n    const authToken = getToken(token);\n    const response = await pm.sendRequest({\n        url: `${pm.variables.get('baseUrl')}/api/files/${path}`,\n        method: 'PUT',\n        header: {\n            'Authorization': `Bearer ${authToken}`,\n            'Content-Type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: { content }\n        }\n    });\n    \n    if (response.code !== 200) {\n        throw new Error(`Update file failed: ${response.json().error}`);\n    }\n    return response.json();\n}\n\n/**\n * Delete a file\n * @param {string} path - Path to the file to delete\n * @param {string} [token] - Optional authentication token\n * @returns {Promise<Object>} Response from delete file endpoint\n */\nasync function deleteFile(path, token) {\n    const authToken = getToken(token);\n    const response = await pm.sendRequest({\n        url: `${pm.variables.get('baseUrl')}/api/files/${path}`,\n        method: 'DELETE',\n        header: { 'Authorization': `Bearer ${authToken}` }\n    });\n    \n    if (response.code !== 200) {\n        throw new Error(`Delete file failed: ${response.json().error}`);\n    }\n    return response.json();\n}\n\nmodule.exports = {\n    setupAuth,\n    readFile,\n    createFile,\n    updateFile,\n    deleteFile\n}; ",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "https://postman-echo.com/post?fileName=your-file",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"post"
									],
									"query": [
										{
											"key": "fileName",
											"value": "your-file"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 20 Feb 2025 17:18:56 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "5145"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "ETag",
									"value": "W/\"1419-5bNGwEE4L5Ui/ccH5WDdWjQMysE\""
								},
								{
									"key": "set-cookie",
									"value": "sails.sid=s%3AHIM5rKUVyM8eoUCnbDnO_FUhFrxlMJtS.vEb%2B2J8RbyLMR8QNnmOjj3ci4bTbqLbiOLPeERkM%2BSQ; Path=/; HttpOnly"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"args\": {\n        \"fileName\": \"your-file\"\n    },\n    \"data\": \"/**\\n * Filesystem API Library\\n * A collection of reusable functions for interacting with the filesystem API\\n */\\n\\n/**\\n * Get authentication token from parameter or environment\\n * @param {string} [token] - Optional token parameter\\n * @returns {string} The token to use\\n * @throws {Error} If no token is available\\n */\\nfunction getToken(token) {\\n    const envToken = pm.variables.get('token');\\n    if (!token && !envToken) {\\n        throw new Error('No token provided and no token found in environment');\\n    }\\n    return token || envToken;\\n}\\n\\n/**\\n * Setup authentication token\\n * @param {string} [token] - Optional authentication token\\n * @returns {Promise<Object>} Response from the auth setup endpoint\\n */\\nasync function setupAuth(token) {\\n    const authToken = getToken(token);\\n    const response = await pm.sendRequest({\\n        url: `${pm.variables.get('baseUrl')}/api/auth/setup`,\\n        method: 'POST',\\n        header: { 'Content-Type': 'application/json' },\\n        body: { mode: 'raw', raw: JSON.stringify({ token: authToken }) }\\n    });\\n    \\n    if (response.code !== 200) {\\n        throw new Error(`Auth setup failed: ${response.json().error}`);\\n    }\\n    return response.json();\\n}\\n\\n/**\\n * Read file contents\\n * @param {string} path - Path to the file\\n * @param {string} [token] - Optional authentication token\\n * @returns {Promise<string>} File contents\\n */\\nasync function readFile(path, token) {\\n    const authToken = getToken(token);\\n    const response = await pm.sendRequest({\\n        url: `${pm.variables.get('baseUrl')}/api/files/${path}`,\\n        method: 'GET',\\n        header: { 'Authorization': `Bearer ${authToken}` }\\n    });\\n    \\n    if (response.code !== 200) {\\n        throw new Error(`Read file failed: ${response.json().error}`);\\n    }\\n    return response.text();\\n}\\n\\n/**\\n * Create a new file\\n * @param {string} path - Path where to create the file\\n * @param {string} content - File content\\n * @param {string} [token] - Optional authentication token\\n * @returns {Promise<Object>} Response from create file endpoint\\n */\\nasync function createFile(path, content, token) {\\n    const authToken = getToken(token);\\n    const response = await pm.sendRequest({\\n        url: `${pm.variables.get('baseUrl')}/api/files/${path}`,\\n        method: 'POST',\\n        header: {\\n            'Authorization': `Bearer ${authToken}`,\\n            'Content-Type': 'application/json'\\n        },\\n        body: {\\n            mode: 'raw',\\n            raw: { content }\\n        }\\n    });\\n    \\n    if (response.code !== 200) {\\n        throw new Error(`Create file failed: ${response.json().error}`);\\n    }\\n    return response.json();\\n}\\n\\n/**\\n * Update file contents\\n * @param {string} path - Path to the file\\n * @param {string} content - New file content\\n * @param {string} [token] - Optional authentication token\\n * @returns {Promise<Object>} Response from update file endpoint\\n */\\nasync function updateFile(path, content, token) {\\n    const authToken = getToken(token);\\n    const response = await pm.sendRequest({\\n        url: `${pm.variables.get('baseUrl')}/api/files/${path}`,\\n        method: 'PUT',\\n        header: {\\n            'Authorization': `Bearer ${authToken}`,\\n            'Content-Type': 'application/json'\\n        },\\n        body: {\\n            mode: 'raw',\\n            raw: { content }\\n        }\\n    });\\n    \\n    if (response.code !== 200) {\\n        throw new Error(`Update file failed: ${response.json().error}`);\\n    }\\n    return response.json();\\n}\\n\\n/**\\n * Delete a file\\n * @param {string} path - Path to the file to delete\\n * @param {string} [token] - Optional authentication token\\n * @returns {Promise<Object>} Response from delete file endpoint\\n */\\nasync function deleteFile(path, token) {\\n    const authToken = getToken(token);\\n    const response = await pm.sendRequest({\\n        url: `${pm.variables.get('baseUrl')}/api/files/${path}`,\\n        method: 'DELETE',\\n        header: { 'Authorization': `Bearer ${authToken}` }\\n    });\\n    \\n    if (response.code !== 200) {\\n        throw new Error(`Delete file failed: ${response.json().error}`);\\n    }\\n    return response.json();\\n}\\n\\nmodule.exports = {\\n    setupAuth,\\n    readFile,\\n    createFile,\\n    updateFile,\\n    deleteFile\\n}; \",\n    \"files\": {},\n    \"form\": {},\n    \"headers\": {\n        \"host\": \"postman-echo.com\",\n        \"x-request-start\": \"t1740071934.871\",\n        \"connection\": \"close\",\n        \"content-length\": \"4188\",\n        \"x-forwarded-proto\": \"https\",\n        \"x-forwarded-port\": \"443\",\n        \"x-amzn-trace-id\": \"Root=1-67b763fe-452fe20b2adb7ba00307996f\",\n        \"authorization\": \"Bearer postman-secret-token\",\n        \"content-type\": \"text/plain\",\n        \"user-agent\": \"PostmanRuntime/7.43.0\",\n        \"accept\": \"*/*\",\n        \"postman-token\": \"f2e38f16-89be-4df8-a818-89953fb9bd1c\",\n        \"accept-encoding\": \"gzip, deflate, br\",\n        \"cookie\": \"sails.sid=s%3AGtcieU1GXwJr9WAT3xQLvOHDYpCAVYLD.NvGeE6UdbNkU%2BziC6HAEeCz4gU%2B04mXbU7O2gz3F6r0\"\n    },\n    \"json\": null,\n    \"url\": \"https://postman-echo.com/post?fileName=your-file\"\n}"
						}
					]
				},
				{
					"name": "List directory and check file is included",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30f0f6e0-7dda-446b-95a7-5515d975f3c1",
								"exec": [
									"const fsLib = pm.require('@automotive-demo/local-filesystem-api-lib');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var fileName = jsonData.args.fileName;",
									"var directoryName = jsonData.args.directoryName;",
									"var fileContent = jsonData.data;",
									"",
									"pm.test(\"List files\", async () => {",
									"    try {",
									"        await fsLib.setupAuth();",
									"        ",
									"        const dirContents = await fsLib.listDirectory(directoryName);",
									"         // Find our file in the directory listing",
									"        const foundFile = dirContents.find(item => ",
									"            item.name === fileName && ",
									"            !item.isDirectory",
									"        );",
									"        ",
									"        // Verify file exists and has correct properties",
									"        pm.expect(foundFile.size).to.be.greaterThan(0);",
									"",
									"    } catch (error) {",
									"        pm.expect.fail(error.message);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {
									"@automotive-demo/local-filesystem-api-lib": {
										"id": "0195244c-fbb7-7035-8ebd-2a9585bd115e"
									}
								}
							}
						}
					],
					"id": "56aa8cdd-29be-4f88-aa4d-8a2c6cdab9fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "/**\n * Filesystem API Library\n * A collection of reusable functions for interacting with the filesystem API\n */\n\n/**\n * Get authentication token from parameter or environment\n * @param {string} [token] - Optional token parameter\n * @returns {string} The token to use\n * @throws {Error} If no token is available\n */\nfunction getToken(token) {\n    const envToken = pm.variables.get('token');\n    if (!token && !envToken) {\n        throw new Error('No token provided and no token found in environment');\n    }\n    return token || envToken;\n}\n\n/**\n * Setup authentication token\n * @param {string} [token] - Optional authentication token\n * @returns {Promise<Object>} Response from the auth setup endpoint\n */\nasync function setupAuth(token) {\n    const authToken = getToken(token);\n    const response = await pm.sendRequest({\n        url: `${pm.variables.get('baseUrl')}/api/auth/setup`,\n        method: 'POST',\n        header: { 'Content-Type': 'application/json' },\n        body: { mode: 'raw', raw: JSON.stringify({ token: authToken }) }\n    });\n    \n    if (response.code !== 200) {\n        throw new Error(`Auth setup failed: ${response.json().error}`);\n    }\n    return response.json();\n}\n\n/**\n * Read file contents\n * @param {string} path - Path to the file\n * @param {string} [token] - Optional authentication token\n * @returns {Promise<string>} File contents\n */\nasync function readFile(path, token) {\n    const authToken = getToken(token);\n    const response = await pm.sendRequest({\n        url: `${pm.variables.get('baseUrl')}/api/files/${path}`,\n        method: 'GET',\n        header: { 'Authorization': `Bearer ${authToken}` }\n    });\n    \n    if (response.code !== 200) {\n        throw new Error(`Read file failed: ${response.json().error}`);\n    }\n    return response.text();\n}\n\n/**\n * Create a new file\n * @param {string} path - Path where to create the file\n * @param {string} content - File content\n * @param {string} [token] - Optional authentication token\n * @returns {Promise<Object>} Response from create file endpoint\n */\nasync function createFile(path, content, token) {\n    const authToken = getToken(token);\n    const response = await pm.sendRequest({\n        url: `${pm.variables.get('baseUrl')}/api/files/${path}`,\n        method: 'POST',\n        header: {\n            'Authorization': `Bearer ${authToken}`,\n            'Content-Type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: { content }\n        }\n    });\n    \n    if (response.code !== 200) {\n        throw new Error(`Create file failed: ${response.json().error}`);\n    }\n    return response.json();\n}\n\n/**\n * Update file contents\n * @param {string} path - Path to the file\n * @param {string} content - New file content\n * @param {string} [token] - Optional authentication token\n * @returns {Promise<Object>} Response from update file endpoint\n */\nasync function updateFile(path, content, token) {\n    const authToken = getToken(token);\n    const response = await pm.sendRequest({\n        url: `${pm.variables.get('baseUrl')}/api/files/${path}`,\n        method: 'PUT',\n        header: {\n            'Authorization': `Bearer ${authToken}`,\n            'Content-Type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: { content }\n        }\n    });\n    \n    if (response.code !== 200) {\n        throw new Error(`Update file failed: ${response.json().error}`);\n    }\n    return response.json();\n}\n\n/**\n * Delete a file\n * @param {string} path - Path to the file to delete\n * @param {string} [token] - Optional authentication token\n * @returns {Promise<Object>} Response from delete file endpoint\n */\nasync function deleteFile(path, token) {\n    const authToken = getToken(token);\n    const response = await pm.sendRequest({\n        url: `${pm.variables.get('baseUrl')}/api/files/${path}`,\n        method: 'DELETE',\n        header: { 'Authorization': `Bearer ${authToken}` }\n    });\n    \n    if (response.code !== 200) {\n        throw new Error(`Delete file failed: ${response.json().error}`);\n    }\n    return response.json();\n}\n\nmodule.exports = {\n    setupAuth,\n    readFile,\n    createFile,\n    updateFile,\n    deleteFile\n}; ",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "https://postman-echo.com/post?fileName=your-file&directoryName=",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							],
							"query": [
								{
									"key": "fileName",
									"value": "your-file"
								},
								{
									"key": "directoryName",
									"value": ""
								}
							]
						}
					},
					"response": [
						{
							"id": "a38bcfac-b838-4b59-b564-48e635ce971c",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/**\n * Filesystem API Library\n * A collection of reusable functions for interacting with the filesystem API\n */\n\n/**\n * Get authentication token from parameter or environment\n * @param {string} [token] - Optional token parameter\n * @returns {string} The token to use\n * @throws {Error} If no token is available\n */\nfunction getToken(token) {\n    const envToken = pm.variables.get('token');\n    if (!token && !envToken) {\n        throw new Error('No token provided and no token found in environment');\n    }\n    return token || envToken;\n}\n\n/**\n * Setup authentication token\n * @param {string} [token] - Optional authentication token\n * @returns {Promise<Object>} Response from the auth setup endpoint\n */\nasync function setupAuth(token) {\n    const authToken = getToken(token);\n    const response = await pm.sendRequest({\n        url: `${pm.variables.get('baseUrl')}/api/auth/setup`,\n        method: 'POST',\n        header: { 'Content-Type': 'application/json' },\n        body: { mode: 'raw', raw: JSON.stringify({ token: authToken }) }\n    });\n    \n    if (response.code !== 200) {\n        throw new Error(`Auth setup failed: ${response.json().error}`);\n    }\n    return response.json();\n}\n\n/**\n * Read file contents\n * @param {string} path - Path to the file\n * @param {string} [token] - Optional authentication token\n * @returns {Promise<string>} File contents\n */\nasync function readFile(path, token) {\n    const authToken = getToken(token);\n    const response = await pm.sendRequest({\n        url: `${pm.variables.get('baseUrl')}/api/files/${path}`,\n        method: 'GET',\n        header: { 'Authorization': `Bearer ${authToken}` }\n    });\n    \n    if (response.code !== 200) {\n        throw new Error(`Read file failed: ${response.json().error}`);\n    }\n    return response.text();\n}\n\n/**\n * Create a new file\n * @param {string} path - Path where to create the file\n * @param {string} content - File content\n * @param {string} [token] - Optional authentication token\n * @returns {Promise<Object>} Response from create file endpoint\n */\nasync function createFile(path, content, token) {\n    const authToken = getToken(token);\n    const response = await pm.sendRequest({\n        url: `${pm.variables.get('baseUrl')}/api/files/${path}`,\n        method: 'POST',\n        header: {\n            'Authorization': `Bearer ${authToken}`,\n            'Content-Type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: { content }\n        }\n    });\n    \n    if (response.code !== 200) {\n        throw new Error(`Create file failed: ${response.json().error}`);\n    }\n    return response.json();\n}\n\n/**\n * Update file contents\n * @param {string} path - Path to the file\n * @param {string} content - New file content\n * @param {string} [token] - Optional authentication token\n * @returns {Promise<Object>} Response from update file endpoint\n */\nasync function updateFile(path, content, token) {\n    const authToken = getToken(token);\n    const response = await pm.sendRequest({\n        url: `${pm.variables.get('baseUrl')}/api/files/${path}`,\n        method: 'PUT',\n        header: {\n            'Authorization': `Bearer ${authToken}`,\n            'Content-Type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: { content }\n        }\n    });\n    \n    if (response.code !== 200) {\n        throw new Error(`Update file failed: ${response.json().error}`);\n    }\n    return response.json();\n}\n\n/**\n * Delete a file\n * @param {string} path - Path to the file to delete\n * @param {string} [token] - Optional authentication token\n * @returns {Promise<Object>} Response from delete file endpoint\n */\nasync function deleteFile(path, token) {\n    const authToken = getToken(token);\n    const response = await pm.sendRequest({\n        url: `${pm.variables.get('baseUrl')}/api/files/${path}`,\n        method: 'DELETE',\n        header: { 'Authorization': `Bearer ${authToken}` }\n    });\n    \n    if (response.code !== 200) {\n        throw new Error(`Delete file failed: ${response.json().error}`);\n    }\n    return response.json();\n}\n\nmodule.exports = {\n    setupAuth,\n    readFile,\n    createFile,\n    updateFile,\n    deleteFile\n}; ",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "https://postman-echo.com/post?fileName=your-file&directoryName=",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"post"
									],
									"query": [
										{
											"key": "fileName",
											"value": "your-file"
										},
										{
											"key": "directoryName",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 20 Feb 2025 18:20:21 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "5181"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "ETag",
									"value": "W/\"143d-soa6qNXYGcYmqwf/kWZ73/fKF80\""
								},
								{
									"key": "set-cookie",
									"value": "sails.sid=s%3ANnKpIyDExBuC84wN9TIjU5WUiT2fY1xw.mOeJgmd9uCu7DXkx%2FWu60WjRBSBEfvAKESRl7dudL2w; Path=/; HttpOnly"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"args\": {\n        \"fileName\": \"your-file\",\n        \"directoryName\": \"\"\n    },\n    \"data\": \"/**\\n * Filesystem API Library\\n * A collection of reusable functions for interacting with the filesystem API\\n */\\n\\n/**\\n * Get authentication token from parameter or environment\\n * @param {string} [token] - Optional token parameter\\n * @returns {string} The token to use\\n * @throws {Error} If no token is available\\n */\\nfunction getToken(token) {\\n    const envToken = pm.variables.get('token');\\n    if (!token && !envToken) {\\n        throw new Error('No token provided and no token found in environment');\\n    }\\n    return token || envToken;\\n}\\n\\n/**\\n * Setup authentication token\\n * @param {string} [token] - Optional authentication token\\n * @returns {Promise<Object>} Response from the auth setup endpoint\\n */\\nasync function setupAuth(token) {\\n    const authToken = getToken(token);\\n    const response = await pm.sendRequest({\\n        url: `${pm.variables.get('baseUrl')}/api/auth/setup`,\\n        method: 'POST',\\n        header: { 'Content-Type': 'application/json' },\\n        body: { mode: 'raw', raw: JSON.stringify({ token: authToken }) }\\n    });\\n    \\n    if (response.code !== 200) {\\n        throw new Error(`Auth setup failed: ${response.json().error}`);\\n    }\\n    return response.json();\\n}\\n\\n/**\\n * Read file contents\\n * @param {string} path - Path to the file\\n * @param {string} [token] - Optional authentication token\\n * @returns {Promise<string>} File contents\\n */\\nasync function readFile(path, token) {\\n    const authToken = getToken(token);\\n    const response = await pm.sendRequest({\\n        url: `${pm.variables.get('baseUrl')}/api/files/${path}`,\\n        method: 'GET',\\n        header: { 'Authorization': `Bearer ${authToken}` }\\n    });\\n    \\n    if (response.code !== 200) {\\n        throw new Error(`Read file failed: ${response.json().error}`);\\n    }\\n    return response.text();\\n}\\n\\n/**\\n * Create a new file\\n * @param {string} path - Path where to create the file\\n * @param {string} content - File content\\n * @param {string} [token] - Optional authentication token\\n * @returns {Promise<Object>} Response from create file endpoint\\n */\\nasync function createFile(path, content, token) {\\n    const authToken = getToken(token);\\n    const response = await pm.sendRequest({\\n        url: `${pm.variables.get('baseUrl')}/api/files/${path}`,\\n        method: 'POST',\\n        header: {\\n            'Authorization': `Bearer ${authToken}`,\\n            'Content-Type': 'application/json'\\n        },\\n        body: {\\n            mode: 'raw',\\n            raw: { content }\\n        }\\n    });\\n    \\n    if (response.code !== 200) {\\n        throw new Error(`Create file failed: ${response.json().error}`);\\n    }\\n    return response.json();\\n}\\n\\n/**\\n * Update file contents\\n * @param {string} path - Path to the file\\n * @param {string} content - New file content\\n * @param {string} [token] - Optional authentication token\\n * @returns {Promise<Object>} Response from update file endpoint\\n */\\nasync function updateFile(path, content, token) {\\n    const authToken = getToken(token);\\n    const response = await pm.sendRequest({\\n        url: `${pm.variables.get('baseUrl')}/api/files/${path}`,\\n        method: 'PUT',\\n        header: {\\n            'Authorization': `Bearer ${authToken}`,\\n            'Content-Type': 'application/json'\\n        },\\n        body: {\\n            mode: 'raw',\\n            raw: { content }\\n        }\\n    });\\n    \\n    if (response.code !== 200) {\\n        throw new Error(`Update file failed: ${response.json().error}`);\\n    }\\n    return response.json();\\n}\\n\\n/**\\n * Delete a file\\n * @param {string} path - Path to the file to delete\\n * @param {string} [token] - Optional authentication token\\n * @returns {Promise<Object>} Response from delete file endpoint\\n */\\nasync function deleteFile(path, token) {\\n    const authToken = getToken(token);\\n    const response = await pm.sendRequest({\\n        url: `${pm.variables.get('baseUrl')}/api/files/${path}`,\\n        method: 'DELETE',\\n        header: { 'Authorization': `Bearer ${authToken}` }\\n    });\\n    \\n    if (response.code !== 200) {\\n        throw new Error(`Delete file failed: ${response.json().error}`);\\n    }\\n    return response.json();\\n}\\n\\nmodule.exports = {\\n    setupAuth,\\n    readFile,\\n    createFile,\\n    updateFile,\\n    deleteFile\\n}; \",\n    \"files\": {},\n    \"form\": {},\n    \"headers\": {\n        \"host\": \"postman-echo.com\",\n        \"x-request-start\": \"t1740075621.123\",\n        \"connection\": \"close\",\n        \"content-length\": \"4188\",\n        \"x-forwarded-proto\": \"https\",\n        \"x-forwarded-port\": \"443\",\n        \"x-amzn-trace-id\": \"Root=1-67b77265-10db588672918a563fa2b9b2\",\n        \"authorization\": \"Bearer postman-secret-token\",\n        \"content-type\": \"text/plain\",\n        \"user-agent\": \"PostmanRuntime/7.43.0\",\n        \"accept\": \"*/*\",\n        \"postman-token\": \"2ca069e2-0f0d-43f4-8586-cac94db09007\",\n        \"accept-encoding\": \"gzip, deflate, br\",\n        \"cookie\": \"sails.sid=s%3AnSW56RoEgLdDy16RVVsep4LXEONFuE4t.EWifSKmDIlEQAzIIvlKv87Bnv0rU5nX4Swy0cg9vwM0\"\n    },\n    \"json\": null,\n    \"url\": \"https://postman-echo.com/post?fileName=your-file&directoryName=\"\n}"
						}
					]
				},
				{
					"name": "Upload a file in a subdirectory and then delete both of them again",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30f0f6e0-7dda-446b-95a7-5515d975f3c1",
								"exec": [
									"const fsLib = pm.require('@automotive-demo/local-filesystem-api-lib');",
									"",
									"// Get directory and file names from the query parameters",
									"const directoryName = pm.response.json().args.directoryName;",
									"const fileName = pm.response.json().args.fileName;",
									"const fullPath = directoryName ? `${directoryName}/${fileName}` : fileName;",
									"",
									"pm.test(\"Create and delete files in subdirectory\", async () => {",
									"    try {",
									"        await fsLib.setupAuth();",
									"        // Create directory first if specified",
									"        if (directoryName) {",
									"           await fsLib.createDirectory(directoryName);",
									"        }",
									"",
									"        // Get the file data from the response",
									"        const files = pm.response.json().files;",
									"        const fileData = Object.values(files)[0];  // Get the first file's data",
									"        ",
									"        // Upload file to subdirectory",
									"        await fsLib.uploadFile(fullPath, fileData);",
									"",
									"        // Read back the file and verify its contents",
									"        const uploadedContent = await fsLib.readFile(fullPath);",
									"        console.log(`Downloaded file size: ${uploadedContent.length} bytes`);",
									"        pm.test(\"File was downloaded with non empty size\", () => {",
									"            pm.expect(uploadedContent.length).to.be.greaterThan(0);",
									"        });",
									"        ",
									"        // Try to delete the directory before the file (should fail)",
									"        try {",
									"            await fsLib.deleteDirectory(directoryName);",
									"            pm.expect.fail(\"Should not be able to delete non-empty directory\");",
									"        } catch (error) {",
									"            pm.expect(error.message).to.include(\"Directory is not empty\");",
									"        }",
									"        ",
									"        // Delete the file first",
									"        await fsLib.deleteFile(fullPath);",
									"        ",
									"        // Now delete the empty directory (only if directory was specified)",
									"        if (directoryName) {",
									"            await fsLib.deleteDirectory(directoryName);",
									"        }",
									"    } catch (error) {",
									"        pm.expect.fail(error.message);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {
									"@automotive-demo/local-filesystem-api-lib": {
										"id": "0195244c-fbb7-7035-8ebd-2a9585bd115e"
									}
								}
							}
						}
					],
					"id": "582006d3-0192-4ca6-b3d7-cc1ee4e1a2aa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"uuid": "55c6c67f-cd6c-4f85-a074-aa9c2ca5053f",
									"src": "/Users/johannesnicolai/Downloads/file2.txt"
								}
							]
						},
						"url": {
							"raw": "https://postman-echo.com/post?fileName=my-file.txt&directoryName=my-subdirectory",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							],
							"query": [
								{
									"key": "fileName",
									"value": "my-file.txt"
								},
								{
									"key": "directoryName",
									"value": "my-subdirectory"
								}
							]
						}
					},
					"response": [
						{
							"id": "7147985c-e33b-4837-8f2e-428200b89caa",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"uuid": "55c6c67f-cd6c-4f85-a074-aa9c2ca5053f",
											"src": "/Users/johannesnicolai/Downloads/file2.txt"
										}
									]
								},
								"url": {
									"raw": "https://postman-echo.com/post?fileName=my-file.txt&directoryName=my-subdirectory",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"post"
									],
									"query": [
										{
											"key": "fileName",
											"value": "my-file.txt"
										},
										{
											"key": "directoryName",
											"value": "my-subdirectory"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 20 Feb 2025 21:13:59 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "1037"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "ETag",
									"value": "W/\"40d-faORggWK6tfYDCpQwCHE+8NiW5k\""
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"args\": {\n        \"fileName\": \"my-file.txt\",\n        \"directoryName\": \"my-subdirectory\"\n    },\n    \"data\": {},\n    \"files\": {\n        \"file2.txt\": \"data:application/octet-stream;base64,SGVsbG8sIFdvcmxkIQ==\"\n    },\n    \"form\": {},\n    \"headers\": {\n        \"host\": \"postman-echo.com\",\n        \"x-request-start\": \"t1740086039.698\",\n        \"connection\": \"close\",\n        \"content-length\": \"216\",\n        \"x-forwarded-proto\": \"https\",\n        \"x-forwarded-port\": \"443\",\n        \"x-amzn-trace-id\": \"Root=1-67b79b17-7669a2b53c2538d0318c2f27\",\n        \"authorization\": \"Bearer postman-secret-token\",\n        \"user-agent\": \"PostmanRuntime/7.43.0\",\n        \"accept\": \"*/*\",\n        \"postman-token\": \"9073fcc8-0834-49b0-9b8d-5481d75e785a\",\n        \"accept-encoding\": \"gzip, deflate, br\",\n        \"content-type\": \"multipart/form-data; boundary=--------------------------990043095003373169299227\",\n        \"cookie\": \"sails.sid=s%3AVpg8zHmYrZEBwKn-yDPSOo7WlGApM2z3.e%2FxcECoSiQ4yrfXaDSK6uNggNggsJDHoaOUEx6jA370\"\n    },\n    \"json\": null,\n    \"url\": \"https://postman-echo.com/post?fileName=my-file.txt&directoryName=my-subdirectory\"\n}"
						}
					]
				}
			],
			"id": "16dd35ee-bd5d-4b5d-bd7f-627a9993c23a",
			"description": "This folder contains post-request-scripts showing how to make use of the reusable library that is calling the API described by this collection"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{token}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "395bb1d8-b418-4fb3-87b4-7433e6a199a1",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7dc47d99-5848-43cd-a6f0-98bf373c6a57",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000"
		},
		{
			"key": "token",
			"value": "your-secret-token-best-from-the-vault"
		}
	]
}